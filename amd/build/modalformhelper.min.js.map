{"version":3,"sources":["../src/modalformhelper.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","TheForm","selector","contextid","formname","callback","preinit","prototype","modal","itemid","init","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","dd","formtitle","e","preventDefault","data","show","formdata","debug","params","jsonformdata","JSON","stringify","ret","loadFragment","handleFormSubmissionResponse","formData","ajaxresult","payloadobject","parse","error","hide","use","M","core_formchangechecker","reset_form_dirty_state","dataobject","decodeURI","replace","thedata","split","usedata","i","length","includes","importdata","pair","decodeURIComponent","alert","message","handleFormSubmissionFailure","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","first","focus","serialize","call","methodname","args","done","fail","submit"],"mappings":"AASAA,OAAM,yCAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,UAAvB,CAAmC,oBAAnC,CAAyD,mBAAzD,CAA6E,eAA7E,CAA8F,WAA9F,CAA2G,UAA3G,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAiBC,CAAjB,CAAsBC,CAAtB,CAAoCC,CAApC,CAAiDC,CAAjD,CAA2DC,CAA3D,CAAiEC,CAAjE,CAAoE,CAYhE,GAAIC,CAAAA,CAAO,CAAG,SAASC,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAuCC,CAAvC,CAAiD,CAC3D,KAAKF,SAAL,CAAiBA,CAAjB,CACA,KAAKC,QAAL,CAAgBA,CAAhB,CACA,KAAKC,QAAL,CAAgBA,CAAhB,CAMA,KAAKC,OAAL,CAAaJ,CAAb,CACH,CAVD,CAgBAD,CAAO,CAACM,SAAR,CAAkBC,KAAlB,CAA0B,IAA1B,CAMAP,CAAO,CAACM,SAAR,CAAkBJ,SAAlB,CAA8B,CAAC,CAA/B,CAMAF,CAAO,CAACM,SAAR,CAAkBE,MAAlB,CAA2B,CAAC,CAA5B,CAMAR,CAAO,CAACM,SAAR,CAAkBH,QAAlB,CAA6B,EAA7B,CASAH,CAAO,CAACM,SAAR,CAAkBG,IAAlB,CAAyB,SAASR,CAAT,CAAmB,CACxC,GAAIS,CAAAA,CAAQ,CAAGlB,CAAC,CAACS,CAAD,CAAhB,CAEA,MAAOP,CAAAA,CAAG,CAACiB,UAAJ,CAAe,KAAKR,QAApB,CAA+B,uBAA/B,EAAwDS,IAAxD,CAA6D,SAASC,CAAT,CAAgB,CAEhF,MAAOlB,CAAAA,CAAY,CAACmB,MAAb,CAAoB,CACvBC,IAAI,CAAEpB,CAAY,CAACqB,KAAb,CAAmBC,WADF,CAEvBJ,KAAK,CAAEA,CAFgB,CAGvBK,IAAI,CAAE,KAAKC,OAAL,CAAa,EAAb,CAHiB,CAApB,CAIJT,CAJI,CAKV,CAPmE,CAOlEU,IAPkE,CAO7D,IAP6D,CAA7D,EAOOR,IAPP,CAOY,SAASL,CAAT,CAAgB,CAE/B,KAAKA,KAAL,CAAaA,CAAb,CAGA,KAAKA,KAAL,CAAWc,QAAX,GAGA,KAAKd,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwB3B,CAAW,CAAC4B,MAApC,CAA4C,UAAW,CACnD,KAAKjB,KAAL,CAAWkB,OAAX,CAAmB,KAAKN,OAAL,CAAa,EAAb,CAAnB,CACH,CAF2C,CAE1CC,IAF0C,CAErC,IAFqC,CAA5C,EAKA,KAAKb,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwB3B,CAAW,CAAC8B,KAApC,CAA2C,UAAW,CAClD,KAAKnB,KAAL,CAAWe,OAAX,GAAqBK,MAArB,CAA4B,uEAA5B,CACH,CAF0C,CAEzCP,IAFyC,CAEpC,IAFoC,CAA3C,EAOA,KAAKb,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwB3B,CAAW,CAACgC,IAApC,CAA0C,KAAKC,UAAL,CAAgBT,IAAhB,CAAqB,IAArB,CAA1C,EAEA,KAAKb,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwB,QAAxB,CAAkC,MAAlC,CAA0C,KAAKO,cAAL,CAAoBV,IAApB,CAAyB,IAAzB,CAA1C,EAEA,MAAO,MAAKb,KACf,CAzBkB,CAyBjBa,IAzBiB,CAyBZ,IAzBY,CAPZ,CAiCV,CApCD,CA6CApB,CAAO,CAACM,SAAR,CAAkBD,OAAlB,CAA4B,SAASJ,CAAT,CAAmB,IACvCS,CAAAA,CAAQ,CAAGlB,CAAC,CAACS,CAAD,CAD2B,CAEvC8B,CAAE,CAAC,IAFoC,CAG3CrC,CAAG,CAACiB,UAAJ,CAAe,KAAKR,QAApB,CAA+B,uBAA/B,EAAwDS,IAAxD,CAA6D,SAASC,CAAT,CAAe,CAACkB,CAAE,CAACC,SAAH,CAAanB,CAAO,CAAjG,EACArB,CAAC,CAAC,MAAD,CAAD,CAAU+B,EAAV,CAAa,OAAb,CAAqBtB,CAArB,CAA8B,SAASgC,CAAT,CAAY,CAEtCA,CAAC,CAACC,cAAF,GAEAH,CAAE,CAACvB,MAAH,CAAUhB,CAAC,CAAC,IAAD,CAAD,CAAQ2C,IAAR,CAAa,IAAb,CAAV,CAEAxC,CAAY,CAACmB,MAAb,CAAoB,CAChBC,IAAI,CAAEpB,CAAY,CAACqB,KAAb,CAAmBC,WADT,CAEhBJ,KAAK,CAAEkB,CAAE,CAACC,SAFM,CAGhBd,IAAI,CAAEa,CAAE,CAACZ,OAAH,CAAW,EAAX,CAHU,CAApB,EAIGP,IAJH,CAIQ,SAAUL,CAAV,CAAiB,CAErBwB,CAAE,CAACxB,KAAH,CAAWA,CAAX,CAGAwB,CAAE,CAACxB,KAAH,CAASc,QAAT,GAGAU,CAAE,CAACxB,KAAH,CAASe,OAAT,GAAmBC,EAAnB,CAAsB3B,CAAW,CAAC4B,MAAlC,CAA0C,UAAW,CACjDO,CAAE,CAACxB,KAAH,CAASkB,OAAT,CAAiBM,CAAE,CAACZ,OAAH,CAAW,EAAX,CAAjB,CACH,CAFyC,CAExCC,IAFwC,CAEnCW,CAFmC,CAA1C,EAKAA,CAAE,CAACxB,KAAH,CAASe,OAAT,GAAmBC,EAAnB,CAAsB3B,CAAW,CAAC8B,KAAlC,CAAyC,UAAY,CACjDK,CAAE,CAACxB,KAAH,CAASe,OAAT,GAAmBK,MAAnB,CAA0B,uEAA1B,CACH,CAFD,EAOAI,CAAE,CAACxB,KAAH,CAASe,OAAT,GAAmBC,EAAnB,CAAsB3B,CAAW,CAACgC,IAAlC,CAAwCG,CAAE,CAACF,UAAH,CAAcT,IAAd,CAAmBW,CAAnB,CAAxC,EAEAA,CAAE,CAACxB,KAAH,CAASe,OAAT,GAAmBC,EAAnB,CAAsB,QAAtB,CAAgC,MAAhC,CAAwCQ,CAAE,CAACD,cAAH,CAAkBV,IAAlB,CAAuBW,CAAvB,CAAxC,EACAA,CAAE,CAACxB,KAAH,CAAS6B,IAAT,GACA,MAAOL,CAAAA,CAAE,CAACxB,KACb,CA7BD,CA+BH,CArCD,CAuCH,CA3CD,CAkDAP,CAAO,CAACM,SAAR,CAAkBa,OAAlB,CAA4B,SAASkB,CAAT,CAAmB,CAC3C5C,CAAG,CAAC6C,KAAJ,CAAUD,CAAV,EACA,GAAwB,WAApB,QAAOA,CAAAA,CAAX,CAAqC,CACjCA,CAAQ,CAAG,EACd,CAJ0C,GAOvCE,CAAAA,CAAM,CAAG,CAACC,YAAY,CAAEC,IAAI,CAACC,SAAL,CAAeL,CAAf,CAAf,CAAyClC,QAAQ,CAAE,KAAKA,QAAxD,CAAkEK,MAAM,CAAE,KAAKA,MAA/E,CAP8B,CAQvCmC,CAAG,CAAG9C,CAAQ,CAAC+C,YAAT,CAAsB,uBAAtB,CAA+C,OAA/C,CAAwD,KAAK1C,SAA7D,CAAwEqC,CAAxE,CARiC,CAS3C9C,CAAG,CAAC6C,KAAJ,CAAUK,CAAV,EACA,MAAOA,CAAAA,CACV,CAXD,CAkBA3C,CAAO,CAACM,SAAR,CAAkBuC,4BAAlB,CAAiD,SAASC,CAAT,CAAkBC,CAAlB,CAA8B,CAM3EtD,CAAG,CAAC6C,KAAJ,CAAUS,CAAV,EACAtD,CAAG,CAAC6C,KAAJ,CAAUQ,CAAV,EAEA,GAAIE,CAAAA,CAAa,CAAGP,IAAI,CAACQ,KAAL,CAAWF,CAAX,CAApB,CAEA,GAAIC,CAAJ,CAAmB,CACfvD,CAAG,CAAC6C,KAAJ,CAAUU,CAAV,EACA,OAAOA,CAAa,CAACE,KAArB,EACI,OACI,KAAK3C,KAAL,CAAW4C,IAAX,GAEApD,CAAC,CAACqD,GAAF,CAAM,+BAAN,CAAuC,UAAW,CAC9CC,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,EACH,CAFD,EAKA,GAAIC,CAAAA,CAAU,CAAGf,IAAI,CAACQ,KAAL,CAAW,MAAOQ,SAAS,CAACX,CAAD,CAAT,CAAoBY,OAApB,CAA4B,IAA5B,CAAkC,MAAlC,EAAyCA,OAAzC,CAAiD,IAAjD,CAAuD,OAAvD,EAA8DA,OAA9D,CAAsE,IAAtE,CAA2E,OAA3E,CAAP,CAA2F,KAAtG,CAAjB,CACA,KAAKtD,QAAL,CAAcoD,CAAd,CAAyBR,CAAa,CAACxC,MAAvC,EACA,MAEJ,OACA,QAEI,GAAmB,YAAhB,QAAKL,QAAR,CAAiC,CAG7B,OAFIwD,CAAAA,CAAO,CAAGb,CAAQ,CAACc,KAAT,CAAe,GAAf,CAEd,CADIC,CAAO,CAAE,EACb,CAAQC,CAAC,CAAC,CAAV,CAAaA,CAAC,CAACH,CAAO,CAACI,MAAvB,CAA+BD,CAAC,EAAhC,CAAmC,CAC/B,GAAGH,CAAO,CAACG,CAAD,CAAP,CAAWE,QAAX,CAAoB,YAApB,CAAH,CAAqC,CACjCH,CAAO,WAAP,CAAwBb,CAAa,CAACiB,UACzC,CAFD,IAEK,CACD,GAAIC,CAAAA,CAAI,CAAGP,CAAO,CAACG,CAAD,CAAP,CAAWF,KAAX,CAAiB,GAAjB,CAAX,CACAC,CAAO,CAACM,kBAAkB,CAACD,CAAI,CAAC,CAAD,CAAL,CAAnB,CAAP,CAAqCC,kBAAkB,CAACD,CAAI,CAAC,CAAD,CAAL,CAC1D,CACJ,CACD,KAAK3D,KAAL,CAAWkB,OAAX,CAAmB,KAAKN,OAAL,CAAa0C,CAAb,CAAnB,EACAO,KAAK,CAACpB,CAAa,CAACqB,OAAf,CACR,CAbD,IAaK,CACD,KAAK9D,KAAL,CAAW4C,IAAX,GAEApD,CAAC,CAACqD,GAAF,CAAM,+BAAN,CAAuC,UAAW,CAC9CC,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,EACH,CAFD,CAGH,CACD9D,CAAG,CAAC6C,KAAJ,CAAU,qBAAV,EApCR,CAsCH,CAxCD,IAwCK,CACD,KAAK/B,KAAL,CAAW4C,IAAX,GAEApD,CAAC,CAACqD,GAAF,CAAM,+BAAN,CAAuC,UAAW,CAC9CC,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,EACH,CAFD,CAGH,CAIJ,CA7DD,CAoEAvD,CAAO,CAACM,SAAR,CAAkBgE,2BAAlB,CAAgD,SAASnC,CAAT,CAAe,CAE3D,KAAK5B,KAAL,CAAWkB,OAAX,CAAmB,KAAKN,OAAL,CAAagB,CAAb,CAAnB,CACH,CAHD,CAYAnC,CAAO,CAACM,SAAR,CAAkBwB,cAAlB,CAAmC,SAASG,CAAT,CAAY,CAE3CA,CAAC,CAACC,cAAF,GAEA,GAAIqC,CAAAA,CAAW,CAAGC,QAAQ,CAACC,WAAT,CAAqB,YAArB,CAAlB,CACAF,CAAW,CAACG,SAAZ,CAAsB,QAAtB,QAMA,KAAKnE,KAAL,CAAWe,OAAX,GAAqBqD,IAArB,CAA0B,QAA1B,EAAoCC,IAApC,CAAyC,SAASC,CAAT,CAAgBC,CAAhB,CAAyB,CAC9DA,CAAO,CAACC,aAAR,CAAsBR,CAAtB,CACH,CAFD,EAKA,GAAIS,CAAAA,CAAO,CAAGxF,CAAC,CAACyF,KAAF,CACV,KAAK1E,KAAL,CAAWe,OAAX,GAAqBqD,IAArB,CAA0B,yBAA1B,CADU,CAEV,KAAKpE,KAAL,CAAWe,OAAX,GAAqBqD,IAArB,CAA0B,QAA1B,CAFU,CAAd,CAMA,GAAIK,CAAO,CAACjB,MAAZ,CAAoB,CAChBiB,CAAO,CAACE,KAAR,GAAgBC,KAAhB,GACA,MACH,CAGD,GAAIrC,CAAAA,CAAQ,CAAG,KAAKvC,KAAL,CAAWe,OAAX,GAAqBqD,IAArB,CAA0B,MAA1B,EAAkCS,SAAlC,EAAf,CAGAtF,CAAI,CAACuF,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,oCADL,CAEPC,IAAI,CAAE,CAACrF,SAAS,CAAE,KAAKA,SAAjB,CAA4BsC,YAAY,CAAEC,IAAI,CAACC,SAAL,CAAeI,CAAf,CAA1C,CAAoE3C,QAAQ,CAAE,KAAKA,QAAnF,CAFC,CAGPqF,IAAI,CAAE,KAAK3C,4BAAL,CAAkCzB,IAAlC,CAAuC,IAAvC,CAA6C0B,CAA7C,CAHC,CAIP2C,IAAI,CAAE,KAAKnB,2BAAL,CAAiClD,IAAjC,CAAsC,IAAtC,CAA4C0B,CAA5C,CAJC,CAAD,CAAV,CAMH,CArCD,CA8CA9C,CAAO,CAACM,SAAR,CAAkBuB,UAAlB,CAA+B,SAASI,CAAT,CAAY,CACvCA,CAAC,CAACC,cAAF,GACA,KAAK3B,KAAL,CAAWe,OAAX,GAAqBqD,IAArB,CAA0B,MAA1B,EAAkCe,MAAlC,EACH,CAHD,CAKA,MAAkE,CAY9DjF,IAAI,CAAE,cAASR,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAwCC,CAAxC,CAAkD,CACpD,MAAO,IAAIJ,CAAAA,CAAJ,CAAYC,CAAZ,CAAsBC,CAAtB,CAAiCC,CAAjC,CAA2CC,CAA3C,CACV,CAd6D,CAgBrE,CA5TC,CAAN","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     block_poodllclassroom/modalformhelper\n * @class      modalformhelper\n * @package    block_poodllclassroom\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/str', 'core/modal_factory', 'core/modal_events','core/fragment', 'core/ajax', 'core/yui'],\n    function($, log, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, formname,callback) {\n            this.contextid = contextid;\n            this.formname = formname;\n            this.callback = callback;\n\n            //this will init on page load (good if just one or two items)\n            //this.init(selector);\n\n            //this will init on item click (better for lots of items)\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.init = function(selector) {\n            var triggers = $(selector);\n            // Fetch the title string.\n            return Str.get_string(this.formname , 'block_poodllclassroom').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n            Str.get_string(this.formname , 'block_poodllclassroom').then(function(title){dd.formtitle=title;});\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                dd.itemid=$(this).data('id');\n\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody({})\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    dd.modal.setLarge();\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody({}));\n                    }.bind(dd));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.shown, function () {\n                        dd.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    dd.modal.getRoot().on(ModalEvents.save, dd.submitForm.bind(dd));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    dd.modal.getRoot().on('submit', 'form', dd.submitFormAjax.bind(dd));\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(formdata) {\n            log.debug(formdata);\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata), formname: this.formname, itemid: this.itemid};\n            var ret = Fragment.loadFragment('block_poodllclassroom', 'mform', this.contextid, params);\n            log.debug(ret);\n            return ret;\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionResponse = function(formData,ajaxresult) {\n      //      this.modal.hide();\n      //      Y.use('moodle-core-formchangechecker', function() {\n      //          M.core_formchangechecker.reset_form_dirty_state();\n      //      });\n\n            log.debug(ajaxresult); //this contains what the server returns (eg new item->id etc)\n            log.debug(formData); //this contains the original form data\n\n            var payloadobject = JSON.parse(ajaxresult);\n\n            if (payloadobject) {\n                log.debug(payloadobject);\n                switch(payloadobject.error) {\n                    case false:\n                        this.modal.hide();\n                        // We could trigger an event instead.\n                        Y.use('moodle-core-formchangechecker', function() {\n                            M.core_formchangechecker.reset_form_dirty_state();\n                        });\n\n                        //process formData\n                        var dataobject = JSON.parse('{\"' + decodeURI(formData).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}');\n                        this.callback(dataobject,payloadobject.itemid);\n                        break;\n\n                    case true:\n                    default:\n                        //if we had an error and this is upload user, alert user and reload failed rows\n                        if(this.formname==='uploaduser') {\n                            var thedata = formData.split('&');\n                            var usedata ={};\n                            for(var i=0; i<thedata.length; i++){\n                                if(thedata[i].includes('importdata')){\n                                    usedata['importdata'] = payloadobject.importdata;\n                                }else{\n                                    var pair = thedata[i].split('=');\n                                    usedata[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]);\n                                }\n                            }\n                            this.modal.setBody(this.getBody(usedata));\n                            alert(payloadobject.message);\n                        }else{\n                            this.modal.hide();\n                            // We could trigger an event instead.\n                            Y.use('moodle-core-formchangechecker', function() {\n                                M.core_formchangechecker.reset_form_dirty_state();\n                            });\n                        }\n                        log.debug('that was an error: ');\n                }\n            }else{\n                this.modal.hide();\n                // We could trigger an event instead.\n                Y.use('moodle-core-formchangechecker', function() {\n                    M.core_formchangechecker.reset_form_dirty_state();\n                });\n            }\n\n\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionFailure = function(data) {\n            //  We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        TheForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'block_poodllclassroom_submit_mform',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData), formname: this.formname},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:block_poodllclassroom/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {string} formname The formname for the course.\n             * @param {Object} callback The function to call after successful deletion (for UI updates)\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formname, callback) {\n                return new TheForm(selector, contextid, formname, callback);\n            }\n        };\n    });"],"file":"modalformhelper.min.js"}