{"version":3,"file":"modalformhelper.min.js","sources":["../src/modalformhelper.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     block_poodllclassroom/modalformhelper\n * @class      modalformhelper\n * @package    block_poodllclassroom\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/str', 'core/modal_factory', 'core/modal_events','core/fragment', 'core/ajax', 'core/yui'],\n    function($, log, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, formname,callback) {\n            this.contextid = contextid;\n            this.formname = formname;\n            this.callback = callback;\n\n            //this will init on page load (good if just one or two items)\n            //this.init(selector);\n\n            //this will init on item click (better for lots of items)\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.init = function(selector) {\n            var triggers = $(selector);\n            // Fetch the title string.\n            return Str.get_string(this.formname , 'block_poodllclassroom').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n            Str.get_string(this.formname , 'block_poodllclassroom').then(function(title){dd.formtitle=title;});\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                dd.itemid=$(this).data('id');\n\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody({})\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    dd.modal.setLarge();\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody({}));\n                    }.bind(dd));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.shown, function () {\n                        dd.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    dd.modal.getRoot().on(ModalEvents.save, dd.submitForm.bind(dd));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    dd.modal.getRoot().on('submit', 'form', dd.submitFormAjax.bind(dd));\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(formdata) {\n            log.debug(formdata);\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata), formname: this.formname, itemid: this.itemid};\n            var ret = Fragment.loadFragment('block_poodllclassroom', 'mform', this.contextid, params);\n            log.debug(ret);\n            return ret;\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionResponse = function(formData,ajaxresult) {\n      //      this.modal.hide();\n      //      Y.use('moodle-core-formchangechecker', function() {\n      //          M.core_formchangechecker.reset_form_dirty_state();\n      //      });\n\n            log.debug(ajaxresult); //this contains what the server returns (eg new item->id etc)\n            log.debug(formData); //this contains the original form data\n\n            var payloadobject = JSON.parse(ajaxresult);\n\n            if (payloadobject) {\n                log.debug(payloadobject);\n                switch(payloadobject.error) {\n                    case false:\n                        this.modal.hide();\n                        // We could trigger an event instead.\n                        Y.use('moodle-core-formchangechecker', function() {\n                            M.core_formchangechecker.reset_form_dirty_state();\n                        });\n\n                        //process formData\n                        var dataobject = JSON.parse('{\"' + decodeURI(formData).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}');\n                        this.callback(dataobject,payloadobject.itemid);\n                        break;\n\n                    case true:\n                    default:\n                        //if we had an error and this is upload user, alert user and reload failed rows\n                        if(this.formname==='uploaduser') {\n                            var thedata = formData.split('&');\n                            var usedata ={};\n                            for(var i=0; i<thedata.length; i++){\n                                if(thedata[i].includes('importdata')){\n                                    usedata['importdata'] = payloadobject.importdata;\n                                }else{\n                                    var pair = thedata[i].split('=');\n                                    usedata[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]);\n                                }\n                            }\n                            this.modal.setBody(this.getBody(usedata));\n                            alert(payloadobject.message);\n                        }else{\n                            this.modal.hide();\n                            // We could trigger an event instead.\n                            Y.use('moodle-core-formchangechecker', function() {\n                                M.core_formchangechecker.reset_form_dirty_state();\n                            });\n                        }\n                        log.debug('that was an error: ');\n                }\n            }else{\n                this.modal.hide();\n                // We could trigger an event instead.\n                Y.use('moodle-core-formchangechecker', function() {\n                    M.core_formchangechecker.reset_form_dirty_state();\n                });\n            }\n\n\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionFailure = function(data) {\n            //  We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        TheForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'block_poodllclassroom_submit_mform',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData), formname: this.formname},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:block_poodllclassroom/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {string} formname The formname for the course.\n             * @param {Object} callback The function to call after successful deletion (for UI updates)\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formname, callback) {\n                return new TheForm(selector, contextid, formname, callback);\n            }\n        };\n    });"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","TheForm","selector","contextid","formname","callback","preinit","prototype","modal","itemid","init","triggers","get_string","this","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","dd","formtitle","e","preventDefault","data","show","formdata","debug","params","jsonformdata","JSON","stringify","ret","loadFragment","handleFormSubmissionResponse","formData","ajaxresult","payloadobject","parse","error","hide","use","M","core_formchangechecker","reset_form_dirty_state","dataobject","decodeURI","replace","thedata","split","usedata","i","length","includes","importdata","pair","decodeURIComponent","alert","message","handleFormSubmissionFailure","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","first","focus","serialize","call","methodname","args","done","fail","submit"],"mappings":"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"}